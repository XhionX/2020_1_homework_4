'''
–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è üëç
–°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è, –ø—Ä–∏–Ω–∏–º–∞—è –º–∞—Å—Å–∏–≤ –∏–º—ë–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –æ–ø–∏—Å—ã–≤–∞—é—â–∞—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ (–∫–∞–∫ –≤ Facebook).

def likes(*arr: str) -> str:
    pass
–ü—Ä–∏–º–µ—Ä—ã:

likes() -> "no one likes this"
likes("Peter") -> "Peter likes this"
likes("Jacob", "Alex") -> "Jacob and Alex like this"
likes("Max", "John", "Mark") -> "Max, John and Mark like this"
likes("Alex", "Jacob", "Mark", "Max") -> "Alex, Jacob and 2 others like this"
–ë–æ–Ω—É—Å–Ω—ã–µ –æ—á–∫–∏
–§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —è–∑—ã–∫–∞—Ö –∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞—Ö - —è–∑—ã–∫ –æ—Ç–≤–µ—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ —è–∑—ã–∫—É –≤—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞.
'''
class MyClass:


    def likes(self, var: list) -> str:
        english = [chr(x) for x in range(ord('a'), ord('z') + 1)]
        russian = [chr(x) for x in range(ord('–∞'), ord('–∞') + 32)]

        def language_definition(var: list) -> str:
            var1 = ','.join(var).lower()
            for i in var1:
                if i in english:
                    return 'english'
                elif i in russian:
                    return 'russian'
            else:
                return 'english'

        if isinstance(var, list):
            pass
        elif not isinstance(var, list):
            print('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö ')
            raise TypeError(' the type of incoming values does not match the expected values')

        if len(var) == 0:
            if language_definition(var) == 'english':
                result = 'no one likes this.'
            elif language_definition(var) == 'russian':
                result = '–Ω–∏–∫–æ–º—É —ç—Ç–æ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è.'
        if len(var) == 1:
            if language_definition(var) == 'english':
                result = var[0] + ' likes this.'
            elif language_definition(var) == 'russian':
                result = var[0] + ' –æ—Ç–º–µ—Ç–∏–ª, —á—Ç–æ –µ–º—É —ç—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è.'
        if len(var) == 2:
            if language_definition(var) == 'english':
                result = var[0] + ' and ' + var[1] + ' like this.'
            elif language_definition(var) == 'russian':
                result = var[0] + ' –∏ ' + var[1] + ' –æ—Ç–º–µ—Ç–∏–ª–∏, —á—Ç–æ –∏–º —ç—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è.'
        if len(var) == 3:
            if language_definition(var) == 'english':
                result = var[0] + ', ' + var[1] + ' and ' + var[2] + ' like this.'
            elif language_definition(var) == 'russian':
                result = var[0] + ', ' + var[1] + ' –∏ ' + var[2] + ' –æ—Ç–º–µ—Ç–∏–ª–∏, —á—Ç–æ –∏–º —ç—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è.'
        if len(var) > 3:
            others = len(var) - 2
            if language_definition(var) == 'english':
                result = var[0] + ', ' + var[1] + ' and ' + str(others) + ' like this.'
            elif language_definition(var) == 'russian':
                result = var[0] + ', ' + var[1] + ' –∏ –µ—â–µ ' + str(others) + ' –æ—Ç–º–µ—Ç–∏–ª–∏, —á—Ç–æ –∏–º —ç—Ç–æ –Ω—Ä–∞–≤–∏—Ç—Å—è.'

        return result


if __name__ == '__main__':
    # Here we can make console input and check how function works

    var = []


    result = MyClass().likes(var)

    print(result)

